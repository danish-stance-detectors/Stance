Best parameters set found on development set for F1 macro:
0.370 for {'C': 981, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
Grid scores on development set:
0.358 (+/-0.030) for {'C': 372, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.345 (+/-0.063) for {'C': 905, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.357 (+/-0.077) for {'C': 445, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.355 (+/-0.073) for {'C': 950, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.347 (+/-0.035) for {'C': 263, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.363 (+/-0.058) for {'C': 974, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.341 (+/-0.025) for {'C': 782, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.354 (+/-0.039) for {'C': 343, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.349 (+/-0.051) for {'C': 974, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.345 (+/-0.041) for {'C': 687, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.360 (+/-0.081) for {'C': 67, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.363 (+/-0.058) for {'C': 957, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.343 (+/-0.056) for {'C': 944, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.363 (+/-0.060) for {'C': 299, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.351 (+/-0.078) for {'C': 766, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.335 (+/-0.032) for {'C': 405, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.370 (+/-0.053) for {'C': 981, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.358 (+/-0.077) for {'C': 407, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.355 (+/-0.041) for {'C': 702, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.358 (+/-0.037) for {'C': 229, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.343 (+/-0.046) for {'C': 545, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.355 (+/-0.074) for {'C': 798, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.347 (+/-0.055) for {'C': 876, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.340 (+/-0.022) for {'C': 448, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.355 (+/-0.075) for {'C': 568, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.360 (+/-0.078) for {'C': 290, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.361 (+/-0.046) for {'C': 603, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.355 (+/-0.075) for {'C': 871, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.357 (+/-0.078) for {'C': 510, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.363 (+/-0.059) for {'C': 748, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.351 (+/-0.038) for {'C': 227, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.363 (+/-0.060) for {'C': 374, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.367 (+/-0.059) for {'C': 57, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.357 (+/-0.027) for {'C': 126, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.363 (+/-0.060) for {'C': 411, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.360 (+/-0.063) for {'C': 109, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.362 (+/-0.059) for {'C': 581, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.356 (+/-0.025) for {'C': 375, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.361 (+/-0.018) for {'C': 146, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.348 (+/-0.045) for {'C': 626, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.351 (+/-0.078) for {'C': 766, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.362 (+/-0.059) for {'C': 555, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.339 (+/-0.030) for {'C': 503, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.363 (+/-0.060) for {'C': 240, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.360 (+/-0.082) for {'C': 76, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.363 (+/-0.058) for {'C': 974, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.340 (+/-0.017) for {'C': 455, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.360 (+/-0.078) for {'C': 240, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.362 (+/-0.034) for {'C': 187, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.355 (+/-0.081) for {'C': 556, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
Classification report for results on evaluation set:
              precision    recall  f1-score   support

           0       0.18      0.18      0.18        68
           1       0.34      0.35      0.34        75
           2       0.12      0.05      0.07        20
           3       0.84      0.86      0.85       589

   micro avg       0.73      0.73      0.73       752
   macro avg       0.37      0.36      0.36       752
weighted avg       0.71      0.73      0.72       752

[[ 12  12   3  41]
 [  7  26   0  42]
 [  3   5   1  11]
 [ 44  33   4 508]]
acc: 0.7274
f1 macro: 0.3620

