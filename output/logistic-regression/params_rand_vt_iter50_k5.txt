Best parameters set found on development set for F1 macro:
0.380 for {'C': 12, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
Grid scores on development set:
0.378 (+/-0.036) for {'C': 919, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.373 (+/-0.049) for {'C': 750, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.372 (+/-0.051) for {'C': 821, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.378 (+/-0.036) for {'C': 886, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.373 (+/-0.050) for {'C': 767, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.374 (+/-0.056) for {'C': 214, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.373 (+/-0.051) for {'C': 857, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.378 (+/-0.036) for {'C': 667, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.374 (+/-0.054) for {'C': 507, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.360 (+/-0.055) for {'C': 2, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.379 (+/-0.035) for {'C': 996, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.337 (+/-0.072) for {'C': 699, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.342 (+/-0.075) for {'C': 617, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.378 (+/-0.035) for {'C': 804, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.359 (+/-0.060) for {'C': 296, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.372 (+/-0.050) for {'C': 736, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.372 (+/-0.057) for {'C': 585, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.372 (+/-0.051) for {'C': 58, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.352 (+/-0.064) for {'C': 866, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.365 (+/-0.044) for {'C': 250, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.337 (+/-0.084) for {'C': 727, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.375 (+/-0.054) for {'C': 436, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.356 (+/-0.065) for {'C': 346, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.375 (+/-0.056) for {'C': 100, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.344 (+/-0.077) for {'C': 572, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.362 (+/-0.086) for {'C': 953, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.379 (+/-0.034) for {'C': 691, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.372 (+/-0.060) for {'C': 610, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.353 (+/-0.065) for {'C': 728, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.375 (+/-0.058) for {'C': 347, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.366 (+/-0.051) for {'C': 140, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.373 (+/-0.052) for {'C': 701, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.334 (+/-0.069) for {'C': 599, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.380 (+/-0.042) for {'C': 12, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.360 (+/-0.047) for {'C': 232, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.372 (+/-0.051) for {'C': 728, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.350 (+/-0.036) for {'C': 408, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.375 (+/-0.054) for {'C': 979, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.374 (+/-0.058) for {'C': 306, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.355 (+/-0.083) for {'C': 977, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.372 (+/-0.052) for {'C': 822, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.379 (+/-0.035) for {'C': 817, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.374 (+/-0.059) for {'C': 439, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.351 (+/-0.075) for {'C': 476, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.379 (+/-0.035) for {'C': 998, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.378 (+/-0.035) for {'C': 771, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.374 (+/-0.054) for {'C': 517, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.369 (+/-0.045) for {'C': 144, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'liblinear'}
0.377 (+/-0.039) for {'C': 421, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
0.374 (+/-0.058) for {'C': 329, 'class_weight': None, 'multi_class': 'auto', 'penalty': 'l2', 'solver': 'liblinear'}
Classification report for results on evaluation set:
              precision    recall  f1-score   support

           0       0.22      0.19      0.20        68
           1       0.32      0.33      0.32        75
           2       0.40      0.20      0.27        20
           3       0.84      0.86      0.85       589

   micro avg       0.73      0.73      0.73       752
   macro avg       0.44      0.40      0.41       752
weighted avg       0.72      0.73      0.73       752

[[ 13  12   1  42]
 [  7  25   0  43]
 [  3   3   4  10]
 [ 36  39   5 509]]
acc: 0.7327
f1 macro: 0.4123

